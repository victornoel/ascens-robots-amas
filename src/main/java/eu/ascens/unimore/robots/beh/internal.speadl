import eu.ascens.unimore.robots.Behaviour
import eu.ascens.unimore.robots.beh.interfaces.IActions
import eu.ascens.unimore.robots.beh.interfaces.IActionsExtra
import eu.ascens.unimore.robots.beh.interfaces.IDecisionsExtra
import eu.ascens.unimore.robots.beh.interfaces.IMessaging
import eu.ascens.unimore.robots.beh.interfaces.IMessagingExtra
import eu.ascens.unimore.robots.beh.interfaces.IPerceptions
import eu.ascens.unimore.robots.beh.interfaces.IPerceptionsExtra
import eu.ascens.unimore.robots.beh.interfaces.IRepresentations
import eu.ascens.unimore.robots.beh.interfaces.IRepresentationsExtra
import eu.ascens.unimore.robots.mason.datatypes.Message
import eu.ascens.unimore.robots.mason.datatypes.RBMessage
import eu.ascens.unimore.robots.mason.interfaces.RobotMovements
import eu.ascens.unimore.robots.mason.interfaces.RobotPerceptions
import fr.irit.smac.may.lib.interfaces.Do
import fr.irit.smac.may.lib.interfaces.Pull
import fr.irit.smac.may.lib.interfaces.Push
import java.util.Collection

namespace eu.ascens.unimore.robots.beh {
	
	component ComposedBehaviour specializes Behaviour {
		
		part d: Decisions {
			bind actions to ap.actions
			bind perceptions to ap.perceptions
			bind representations to r.representations
		}
		
		part r: Representations {
			bind perceptions to ap.perceptions
			bind messaging to m.messaging
		}
		
		part ap: ActionsPerceptions {
			bind move to move
			bind see to see
			bind radioBroadcast to radioBroadcast
			bind rbBroadcast to rbBroadcast
			bind id to id
			bind messaging to m.messaging
		}
		
		part m: Messaging {
			bind getRBMessages to getRBMessages
			bind getRadioMessages to getRadioMessages
			bind perceptions to ap.perceptions
		}
		
	}
	
	component Messaging {
		provides preStep: Do
		
		provides messaging: IMessagingExtra
		
		requires perceptions: IPerceptions
		
		requires getRadioMessages: Pull[Collection[Message]]
		requires getRBMessages: Pull[Collection[RBMessage]]
	}
	
	component Representations {
		
		provides preStep: Do
		provides representations: IRepresentationsExtra
		
		requires messaging: IMessaging
		requires perceptions: IPerceptions
	}
	
	component Decisions {
		
		provides step: Do
		provides decisions: IDecisionsExtra
		
		requires actions: IActions
		requires perceptions: IPerceptions
		requires representations: IRepresentations
	}
	
	component ActionsPerceptions {

		provides preStep: Do
		provides actions: IActionsExtra
		provides perceptions: IPerceptionsExtra
		
		requires id: Pull[String]
		requires messaging: IMessaging
		requires see: RobotPerceptions
		requires move: RobotMovements
		requires rbBroadcast: Push[Message]
		requires radioBroadcast: Push[Message]
		
	}
	
}